package com.app.allyworld.postservice.resource;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.allyworld.postservice.entity.Post;
import com.app.allyworld.postservice.service.PostService;

@RestController
@RequestMapping("/posts")
public class PostResource {

	@Autowired
	private PostService service;

	@PostMapping()
	public ResponseEntity<Post> addNewPost(@RequestBody Post post) {
		service.addNewPost(post);
		System.out.println(post);
		return new ResponseEntity<Post>(post, HttpStatus.CREATED);
	}

	@GetMapping
	public ResponseEntity<List<Post>> getAllPosts() {
		List<Post> allPosts = service.getAllPosts();
		System.out.println("getting all posts");
		return new ResponseEntity<List<Post>>(allPosts, HttpStatus.OK);
	}

	@GetMapping("/Profile/{profileId}")
	public ResponseEntity<List<Post>> getPostByProfileId(@PathVariable Integer profileId) {
		System.out.println(profileId);
			List<Post> postList = service.getPostByProfileId(profileId);
			return new ResponseEntity<List<Post>>(postList, HttpStatus.OK);
	}
	@GetMapping("/{postId}")
	public Optional<Post> getPostbyId(@PathVariable int postId) {
		return service.getPostById(postId);
	}

	@DeleteMapping("/{postId}")
	public ResponseEntity<Post> deletePostById(@PathVariable int postId) {
		// service.getPostById(postId);
		System.out.println("checked");
		service.deletePostById(postId);
		return new ResponseEntity<Post>(HttpStatus.OK);
	}

	@DeleteMapping
	public ResponseEntity<String> deletePost() {
		service.deletePost();
		return new ResponseEntity<String>(HttpStatus.OK);
	}

	@PutMapping("/{postId}")
	public ResponseEntity<Post> updatePost(@RequestBody Post post, @PathVariable Integer postId) {
		//System.out.println(post.getPostId());
		Optional<Post> posts = service.getPostById(postId);
		if (posts.isPresent()) {
			return new ResponseEntity<Post>(HttpStatus.NOT_FOUND);
		}
		Post updatedPost = service.updatePost(post);
		return new ResponseEntity<Post>(updatedPost, HttpStatus.OK);

	}

}
